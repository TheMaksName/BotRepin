import asyncio
import logging
from time import time
from typing import Dict, Union, Callable, Awaitable
from asyncio import gather

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup
from aiogram.filters import Command, StateFilter
from sqlalchemy.ext.asyncio import AsyncSession

from app.bot.FSM.FSM_user_private import RegistrationUser, User_MainStates
from app.bot.handlers.user_edit_profile import user_view_profile_router
from app.bot.handlers.user_registartion import user_registration_router
from app.kbds.inline import get_callback_btns
from app.kbds.reply import get_keyboard, menu_kb
from app.database.orm_query import (
    orm_Get_info_user, orm_get_news_by_id, orm_get_all_news,
    orm_get_all_themes_by_category_id, orm_get_theme_by_id,
    orm_Edit_user_profile, orm_get_material_by_id
)
from config import settings

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_private_router = Router()
user_private_router.include_router(user_registration_router)
user_private_router.include_router(user_view_profile_router)

# –ö—ç—à —Å —Ç–∞–π–º-–∞—É—Ç–æ–º (30 –º–∏–Ω—É—Ç)
CACHE_TIMEOUT = 1800
cache_current_news: Dict[int, int] = {}
cache_current_theme: Dict[int, int] = {}
cache_current_material: Dict[int, int] = {}
cache_last_access: Dict[int, float] = {}

async def paginate_items(
    message: Union[Message, CallbackQuery],
    session: AsyncSession,
    user_id: int,
    item_id: int,
    cache: Dict[int, int],
    fetch_func: Callable,
    format_func: Callable,
    kb_func: Callable[[list, int], Union[InlineKeyboardMarkup, Awaitable[InlineKeyboardMarkup]]]
) -> None:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤."""
    try:
        # –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ –∫—ç—à–∞
        if user_id in cache and time() - cache_last_access.get(user_id, 0) > CACHE_TIMEOUT:
            del cache[user_id]
            cache_last_access.pop(user_id, None)

        cache[user_id] = item_id
        cache_last_access[user_id] = time()

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        items = await fetch_func(session, item_id)
        if not items:
            text = "–ë–æ–ª—å—à–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–µ—Ç."
            await (message.answer if isinstance(message, Message) else message.message.edit_text)(text)
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        text_task = asyncio.create_task(asyncio.to_thread(format_func, items))
        kb_task = asyncio.create_task(kb_func(items, item_id))
        text, reply_markup_result = await gather(text_task, kb_task)
        reply_markup = await reply_markup_result if isinstance(reply_markup_result, Awaitable) else reply_markup_result

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if isinstance(message, Message):
            await message.answer(text, reply_markup=reply_markup)
        else:
            await message.message.edit_text(text, reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è user_id={user_id}, item_id={item_id}: {e}")
        await (message.answer if isinstance(message, Message) else message.message.edit_text)("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏.")

# –ö–æ–º–∞–Ω–¥–∞ /menu
@user_private_router.message(Command('menu'))
async def menu(message: Message) -> None:
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    await message.answer("–û—Ç–∫—Ä—ã–≤–∞—é –º–µ–Ω—é...", reply_markup=menu_kb)
    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é")

# –ö–æ–º–∞–Ω–¥–∞ "–Ω–æ–≤–æ—Å—Ç–∏"
@user_private_router.message(F.text.lower() == '–Ω–æ–≤–æ—Å—Ç–∏')
async def news(message: Message, session: AsyncSession) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–≤—É—é –Ω–æ–≤–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    user_id = message.from_user.id
    await paginate_items(
        message, session, user_id, 1, cache_current_news,
        orm_get_news_by_id,
        lambda n: f"<strong>{n.text}</strong>" if n else "–ù–æ–≤–æ—Å—Ç–µ–π –ø–æ–∫–∞ –Ω–µ—Ç(((",
        lambda n, _: get_callback_btns(btns={"–î–∞–ª–µ–µ": "news_next"}) if n else None
    )

# –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π
@user_private_router.callback_query(F.data.startswith('news_'))
async def slide_news(callback: CallbackQuery, session: AsyncSession) -> None:
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –≤–ø–µ—Ä–µ–¥ –∏–ª–∏ –Ω–∞–∑–∞–¥."""
    user_id = callback.from_user.id
    action = callback.data.split("_")[1]
    current_news_id = cache_current_news.get(user_id, 1)
    new_id = current_news_id + 1 if action == 'next' else max(1, current_news_id - 1)

    async def kb_func(news, _):
        next_exists = await orm_get_news_by_id(session, new_id + 1)
        return get_callback_btns(btns={"–ù–∞–∑–∞–¥": "news_back", "–î–∞–ª–µ–µ": "news_next" if next_exists else None})

    await paginate_items(
        callback, session, user_id, new_id, cache_current_news,
        orm_get_news_by_id,
        lambda n: f"<strong>{n.text}</strong>",
        kb_func
    )
    await callback.answer()

# –ö–æ–º–∞–Ω–¥–∞ "–º–∞—Ç–µ—Ä–∏–∞–ª—ã"
@user_private_router.message(F.text.lower() == '–º–∞—Ç–µ—Ä–∏–∞–ª—ã')
async def get_material(message: Message, session: AsyncSession, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤."""
    user_id = message.from_user.id
    await paginate_items(
        message, session, user_id, 0, cache_current_material,
        orm_get_material_by_id,
        lambda ms: "\n".join(f"{m.id}üü¶ {m.title}" for m in ms) if ms else "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç",
        lambda ms, _: get_callback_btns(
            btns={f"–ú–∞—Ç–µ—Ä–∏–∞–ª ‚Ññ{m.id}": f"choice_material_{m.id}" for m in ms} | {"–î–∞–ª–µ–µ": "slide_material_next"},
            sizes=(3, 3, 2)
        ) if ms else None
    )

# –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
@user_private_router.callback_query(F.data.startswith('slide_material_'))
async def slide_material(callback: CallbackQuery, session: AsyncSession) -> None:
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤–ø–µ—Ä–µ–¥ –∏–ª–∏ –Ω–∞–∑–∞–¥."""
    user_id = callback.from_user.id
    action = callback.data.split("_")[2]
    current_id = cache_current_material.get(user_id, 0)
    new_id = current_id + 1 if action == 'next' else max(0, current_id - 1)

    async def kb_func(mats, _):
        next_exists_task = asyncio.create_task(orm_get_material_by_id(session, new_id + 1))
        prev_exists = new_id > 0
        next_exists = await next_exists_task
        btns = {f"–ú–∞—Ç–µ—Ä–∏–∞–ª ‚Ññ{m.id}": f"choice_material_{m.id}" for m in mats}
        if prev_exists:
            btns["–ù–∞–∑–∞–¥"] = "slide_material_back"
        if next_exists:
            btns["–î–∞–ª–µ–µ"] = "slide_material_next"
        return get_callback_btns(btns=btns, sizes=(3, 3, 2))

    await paginate_items(
        callback, session, user_id, new_id, cache_current_material,
        orm_get_material_by_id,
        lambda ms: "\n".join(f"{m.id}üü¶ {m.title}" for m in ms),
        kb_func
    )

# –ö–æ–º–∞–Ω–¥–∞ "–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–º—ã"
@user_private_router.message(F.text.lower() == '–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–º—ã')
async def get_themes(message: Message, session: AsyncSession, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ–º."""
    user_id = message.from_user.id
    await paginate_items(
        message, session, user_id, 1, cache_current_theme,
        orm_get_all_themes_by_category_id,
        lambda ts: f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {ts[0].category.title}\n\n" + "\n".join(
            f"{t.id}üü¶ {t.title}\nüìå–ü—Ä–∏–µ–º: {t.technique}" for t in ts),
        lambda ts, _: get_callback_btns(
            btns=({"–¢–µ–º–∞ ‚Ññ{t.id}": f"choice_theme_{t.id}" for t in ts} if settings.prod else {}) | {
                "–î–∞–ª–µ–µ": "slide_theme_next"},
            sizes=(3, 3, 2)
        )
    )

# –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º
@user_private_router.callback_query(F.data.startswith('slide_theme_'))
async def slide_theme(callback: CallbackQuery, session: AsyncSession) -> None:
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ–º."""
    user_id = callback.from_user.id
    action = callback.data.split("_")[2]
    current_id = cache_current_theme.get(user_id, 1)
    new_id = current_id + 1 if action == 'next' else max(1, current_id - 1)

    async def kb_func(themes, _):
        next_exists_task = asyncio.create_task(orm_get_all_themes_by_category_id(session, new_id + 1))
        prev_exists = new_id > 1
        next_exists = await next_exists_task
        btns = {"–¢–µ–º–∞ ‚Ññ{t.id}": f"choice_theme_{t.id}" for t in themes} if settings.prod else {}
        if prev_exists:
            btns["–ù–∞–∑–∞–¥"] = "slide_theme_back"
        if next_exists:
            btns["–î–∞–ª–µ–µ"] = "slide_theme_next"
        return get_callback_btns(btns=btns, sizes=(3, 3, 2))

    await paginate_items(
        callback, session, user_id, new_id, cache_current_theme,
        orm_get_all_themes_by_category_id,
        lambda ts: f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {ts[0].category.title}\n\n" + "\n".join(
            f"{t.id}üü¶ {t.title}\nüìå–ü—Ä–∏–µ–º: {t.technique}" for t in ts),
        kb_func
    )

# –í—ã–±–æ—Ä —Ç–µ–º—ã
@user_private_router.callback_query(F.data.startswith('choice_theme_'))
async def choice_theme(callback: CallbackQuery, session: AsyncSession, state: FSMContext) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã."""
    theme_id = int(callback.data.split('_')[2])
    theme = await orm_get_theme_by_id(session, theme_id)
    if not theme:
        await callback.answer("–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    await state.update_data(prev_message_id=callback.message.message_id)
    await callback.message.answer(
        f"–í—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ —Ç–µ–º—É:\n\nüü¶ {theme.title}\nüìå–ü—Ä–∏–µ–º: {theme.technique}\n\n–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –≤—ã–±–æ—Ä?",
        reply_markup=get_callback_btns(
            btns={"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é‚úÖ": f"confirm_theme_{theme_id}", "–Ø –ø–µ—Ä–µ–¥—É–º–∞–ª‚ùå": "confirm_theme_"}
        )
    )

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã
@user_private_router.callback_query(F.data.startswith("confirm_theme_"))
async def confirm_theme(callback: CallbackQuery, session: AsyncSession, state: FSMContext) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã."""
    confirm_theme_id = callback.data.split("_")[2]
    user_id = callback.from_user.id
    state_data = await state.get_data()
    prev_message_id = state_data.get("prev_message_id")

    if confirm_theme_id:
        theme = await orm_get_theme_by_id(session, int(confirm_theme_id))
        if theme and await orm_Edit_user_profile(session, user_id, {'edit_theme': f"{theme.title} {theme.technique}"}):
            await callback.bot.delete_messages(callback.message.chat.id, [callback.message.message_id, prev_message_id])
            await callback.message.answer("–¢–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω–∞üì•")
        else:
            await callback.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–µ–º—ã.")
    else:
        await callback.message.delete()

# –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@user_private_router.message(User_MainStates.after_registration, F.text.lower() == '–º–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
async def get_user_profile(message: Message, session: AsyncSession, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    data = await orm_Get_info_user(session, message.from_user.id)
    if data:
        await state.set_state(User_MainStates.user_view_profile)
        text = (
            f"üìÑ–§–ò–û: {data.name}\nüè´–®–∫–æ–ª–∞: {data.school}\nüì±–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {data.phone_number}\n"
            f"üìß–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞: {data.mail}\nüë®‚Äçüè´–§–ò–û –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞: {data.name_mentor}\n"
            f"üë™–î–æ–ª–∂–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞: {data.post_mentor or ''}\nüìú–¢–µ–º–∞: {data.theme}"
        )
        await message.answer(text, reply_markup=get_keyboard("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "–ù–∞–∑–∞–¥", sizes=(2,)))
    else:
        await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")