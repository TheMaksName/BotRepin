import asyncio
import logging
from time import time
from typing import Dict, Union, Callable, Awaitable

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InputMediaPhoto, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, StateFilter
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.ext.asyncio import AsyncSession
from app.bot.FSM.FSM_user_private import RegistrationUser, User_MainStates
from app.bot.handlers.user_edit_profile import user_view_profile_router
from app.bot.handlers.user_registartion import user_registration_router
from app.kbds.inline import get_callback_btns, create_material_buttons
from app.kbds.reply import get_keyboard
from app.database.orm_query import orm_Get_info_user, orm_get_news_by_id, orm_get_all_news, \
    orm_get_all_themes_by_category_id, orm_get_theme_by_id, orm_Edit_user_profile, orm_get_material_by_id
from app.kbds import reply
from config import settings

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_private_router = Router()
user_private_router.include_router(user_registration_router)
user_private_router.include_router(user_view_profile_router)

# –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –Ω–æ–≤–æ—Å—Ç–∏ –∏ —Ç–µ–º—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# –ö—ç—à —Å —Ç–∞–π–º-–∞—É—Ç–æ–º
CACHE_TIMEOUT = 1800 # 30 –º–∏–Ω—É—Ç
cache_current_news: Dict[int, int] = {}
cache_current_theme: Dict[int, int] = {}
cache_current_material: Dict[int, int] = {}
cache_last_access: Dict[int, float] = {}


async def paginate_items(
        message: Union[Message, CallbackQuery],
        session: AsyncSession,
        user_id: int,
        item_id: int,
        cache: Dict[int, int],
        fetch_func: Callable,
        format_func: Callable,
        kb_func: Callable[[list, int], Union[InlineKeyboardMarkup, Awaitable[InlineKeyboardMarkup]]]
) -> None:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤."""
    try:
        if user_id in cache and time() - cache_last_access.get(user_id, 0) > CACHE_TIMEOUT:
            del cache[user_id]

        cache[user_id] = item_id
        cache_last_access[user_id] = time()
        items = await fetch_func(session, item_id)
        if not items:
            await (message.answer if isinstance(message, Message) else message.message.edit_text)("–ë–æ–ª—å—à–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–µ—Ç.")
            return
        text = format_func(items)
        reply_markup_result = kb_func(items, item_id)
        reply_markup = await reply_markup_result if isinstance(reply_markup_result, Awaitable) else reply_markup_result
        if isinstance(message, Message):
            await message.answer(text, reply_markup=reply_markup)
        else:
            await message.message.edit_text(text, reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è user_id={user_id}: {e}")
        await (message.answer if isinstance(message, Message) else message.message.edit_text)("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏.")


# –ö–æ–º–∞–Ω–¥–∞ /menu –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é
# @user_private_router.message(Command('menu'))
# async def menu(message: Message) -> None:
#     """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
#     logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é")
#     await message.answer("–û—Ç–∫—Ä—ã–≤–∞—é –º–µ–Ω—é...", reply_markup=reply.menu_kb)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã "–Ω–æ–≤–æ—Å—Ç–∏"
@user_private_router.message(F.text.lower() == '–Ω–æ–≤–æ—Å—Ç–∏')
async def news(message: Message, session: AsyncSession) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ Telegram-–∫–∞–Ω–∞–ª –Ω–æ–≤–æ—Å—Ç–µ–π."""
    builder = InlineKeyboardBuilder()
    builder.button(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –¢–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª", url=settings.news_channel_url)
    await message.answer(
        "–°—é–¥–∞ –ø—Ä–∏—Å—ã–ª–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏.ü§∑\n–í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ Telegram-–∫–∞–Ω–∞–ª–µ.‚§µ",
        reply_markup=builder.as_markup()
    )

    # """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–≤—É—é –Ω–æ–≤–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    # user_id = message.from_user.id
    #
    # await paginate_items(
    #     message, session, user_id, 1,cache_current_news, orm_get_news_by_id,
    #     lambda n: f"<strong>{n.text}</strong>" if n else "–ù–æ–≤–æ—Å—Ç–µ–π –ø–æ–∫–∞ –Ω–µ—Ç(((",
    #     lambda n, _: get_callback_btns(btns={"–î–∞–ª–µ–µ": "news_next"}) if n else None
    # )




# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É –Ω–æ–≤–æ—Å—Ç—è–º–∏
@user_private_router.callback_query(F.data.startswith('news_'))
async def slide_news(callback: CallbackQuery, session: AsyncSession) -> None:
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –≤–ø–µ—Ä–µ–¥ –∏–ª–∏ –Ω–∞–∑–∞–¥."""
    user_id = callback.from_user.id
    action = callback.data.split("_")[1]  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ (next –∏–ª–∏ back)
    current_news_id = cache_current_news.get(user_id, 1)
    new_id = current_news_id + 1 if action == 'next' else max(1, current_news_id - 1)

    async def kb_func(news, _):
        next_exists = await orm_get_news_by_id(session, new_id + 1)
        return get_callback_btns(btns={"–ù–∞–∑–∞–¥": "news_back", "–î–∞–ª–µ–µ": "news_next" if next_exists else None})

    await paginate_items(
        callback, session, user_id, new_id, cache_current_news,
        orm_get_news_by_id,
        lambda n: f"<strong>{n.text}</strong>",
        kb_func
    )
    await callback.answer()



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã "–º–∞—Ç–µ—Ä–∏–∞–ª—ã"
@user_private_router.message(F.text.lower() == '–º–∞—Ç–µ—Ä–∏–∞–ª—ã')
async def get_material(message: Message, session: AsyncSession, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å —Å—Å—ã–ª–∫–∞–º–∏."""
    user_id = message.from_user.id
    await paginate_items(
        message, session, user_id, 0, cache_current_material,
        orm_get_material_by_id,
        lambda ms: "\n".join(f"{m.id}üü¶ {m.title}" for m in ms) if ms else "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç",
        lambda ms, _: create_material_buttons(ms) if ms else None
    )




@user_private_router.callback_query(F.data.startswith('slide_material_'))
async def slide_material(callback: CallbackQuery, session: AsyncSession) -> None:
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤–ø–µ—Ä–µ–¥ –∏–ª–∏ –Ω–∞–∑–∞–¥."""
    user_id = callback.from_user.id
    action = callback.data.split("_")[2]
    current_id = cache_current_material.get(user_id, 0)
    new_id = current_id + 1 if action == 'next' else max(0, current_id - 1)

    async def kb_func(mats, _):
        next_exists_task = asyncio.create_task(orm_get_material_by_id(session, new_id + 1))
        prev_exists = new_id > 0
        next_exists = await next_exists_task
        builder = InlineKeyboardBuilder()
        for material in mats:
            if material.link:
                builder.button(text=f"–ú–∞—Ç–µ—Ä–∏–∞–ª ‚Ññ{material.id}", url=material.link)
            else:
                builder.button(text=f"–ú–∞—Ç–µ—Ä–∏–∞–ª ‚Ññ{material.id} (–Ω–µ—Ç —Å—Å—ã–ª–∫–∏)", callback_data=f"no_link_{material.id}")
        if prev_exists:
            builder.button(text="–ù–∞–∑–∞–¥", callback_data="slide_material_back")
        if next_exists:
            builder.button(text="–î–∞–ª–µ–µ", callback_data="slide_material_next")
        builder.adjust(3, 3, 2)
        return builder.as_markup()

    await paginate_items(
        callback, session, user_id, new_id, cache_current_material,
        orm_get_material_by_id,
        lambda ms: "\n".join(f"{m.id}üü¶ {m.title}" for m in ms),
        kb_func
    )


    # user_id = callback.from_user.id
    # action = callback.data.split('_')[2]  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ (next –∏–ª–∏ back)
    # current_category_id = cache_current_material.get(user_id, 1)
    #
    # if action == 'next':
    #     current_category_id += 1
    # elif action == 'back':
    #     current_category_id = max(0, current_category_id - 1)  # –ù–µ –æ–ø—É—Å–∫–∞–µ–º—Å—è –Ω–∏–∂–µ –ø–µ—Ä–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    #
    # cache_current_theme[user_id] = current_category_id
    # materials = await orm_get_material_by_id(session=session, material_id=current_category_id)
    #
    # if materials:
    #     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    #     next_materials_exists = await orm_get_material_by_id(session=session, material_id=current_category_id + 1)
    #     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    #     prev_materials_exists = await orm_get_material_by_id(session=session, material_id=current_category_id - 1)
    #
    #     # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ–º
    #
    #     btns = {f'–ú–∞—Ç–µ—Ä–∏–∞–ª ‚Ññ{material.id}': f'choice_material_{material.id}' for material in materials}
    #
    #
    #     # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥", –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    #     if prev_materials_exists:
    #         btns.update({"–ù–∞–∑–∞–¥": "slide_material_back"})
    #
    #     # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–î–∞–ª–µ–µ", –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    #     if next_materials_exists:
    #         btns.update({"–î–∞–ª–µ–µ": "slide_material_next"})
    #
    #     # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    #     reply_markup = get_callback_btns(btns=btns, sizes=(3, 3, 2))
    #
    #     # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ–º–∞—Ö
    #     result_answer = ""
    #     for material in materials:
    #         result_answer += f'{material.id}üü¶ {material.title}\n'
    #
    #     await callback.message.edit_text(f"–í—ã–≤–æ–∂—É —Å–ø–∏—Å–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.\n\n{result_answer}", reply_markup=reply_markup)
    # else:
    #     await callback.answer("–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")





# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã "–≤—ã–±—Ä–∞—Ç—å —Ç–µ–º—É"
@user_private_router.message(F.text.lower() == '–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–º—ã')
async def get_theme(message: Message, session: AsyncSession, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ–º."""
    user_id = message.from_user.id
    await paginate_items(
        message, session, user_id, 1, cache_current_theme,
        orm_get_all_themes_by_category_id,
        lambda ts: f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {ts[0].category.title}\n\n" + "\n".join(
            f"{t.id}üü¶ {t.title}\nüìå–ü—Ä–∏–µ–º: {t.technique}" for t in ts),
        lambda ts, _: get_callback_btns(
            btns=({f"–¢–µ–º–∞ ‚Ññ{t.id}": f"choice_theme_{t.id}" for t in ts} if settings.prod else {}) | {
                "–î–∞–ª–µ–µ": "slide_theme_next"},
            sizes=(3, 3, 2)
        )
    )

    # user_id = message.from_user.id
    # cache_current_theme[user_id] = 1  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Ç–µ–º—É
    # themes = await orm_get_all_themes_by_category_id(session=session, category_id=1)
    #
    # if themes:
    #     if settings.prod:
    #         btns = {f'–¢–µ–º–∞ ‚Ññ{theme.id}': f'choice_theme_{theme.id}' for theme in themes}
    #     else:
    #         btns = {}
    #     btns.update({"–î–∞–ª–µ–µ": "slide_theme_next"})
    #     reply_markup = get_callback_btns(btns=btns, sizes=(3, 3, 2))
    #
    #     result_answer = f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {themes[0].category.title}\n\n"
    #     for theme in themes:
    #         result_answer += (f'{theme.id}üü¶ {theme.title}\n'
    #                          f'üìå–ü—Ä–∏–µ–º: {theme.technique}\n\n')
    #
    #     await message.answer(f"–í—ã–≤–æ–∂—É —Å–ø–∏—Å–æ–∫ —Ç–µ–º.\n\n{result_answer}", reply_markup=reply_markup)
    # else:
    #     await message.answer("–¢–µ–º—ã –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É —Ç–µ–º–∞–º–∏
@user_private_router.callback_query(F.data.startswith('slide_theme_'))
async def choice_theme(callback: CallbackQuery, session: AsyncSession) -> None:
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ–º."""
    user_id = callback.from_user.id
    action = callback.data.split("_")[2]
    current_id = cache_current_theme.get(user_id, 1)
    new_id = current_id + 1 if action == 'next' else max(1, current_id - 1)

    async def kb_func(themes, _):
        next_exists = await orm_get_all_themes_by_category_id(session, new_id + 1)
        prev_exists = new_id > 1
        btns = {f"–¢–µ–º–∞ ‚Ññ{t.id}": f"choice_theme_{t.id}" for t in themes} if settings.prod else {}
        if prev_exists:
            btns["–ù–∞–∑–∞–¥"] = "slide_theme_back"
        if next_exists:
            btns["–î–∞–ª–µ–µ"] = "slide_theme_next"
        return get_callback_btns(btns=btns, sizes=(3, 3, 2))

    await paginate_items(
        callback, session, user_id, new_id, cache_current_theme,
        orm_get_all_themes_by_category_id,
        lambda ts: f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {ts[0].category.title}\n\n" + "\n".join(
            f"{t.id}üü¶ {t.title}\nüìå–ü—Ä–∏–µ–º: {t.technique}" for t in ts),
        kb_func
    )
    # user_id = callback.from_user.id
    # action = callback.data.split('_')[2]  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ (next –∏–ª–∏ back)
    # current_category_id = cache_current_theme.get(user_id, 1)
    #
    # if action == 'next':
    #     current_category_id += 1
    # elif action == 'back':
    #     current_category_id = max(1, current_category_id - 1)  # –ù–µ –æ–ø—É—Å–∫–∞–µ–º—Å—è –Ω–∏–∂–µ –ø–µ—Ä–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    #
    # cache_current_theme[user_id] = current_category_id
    # themes = await orm_get_all_themes_by_category_id(session=session, category_id=current_category_id)
    #
    # if themes:
    #     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    #     next_category_exists = await orm_get_all_themes_by_category_id(session=session, category_id=current_category_id + 1)
    #     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    #     prev_category_exists = await orm_get_all_themes_by_category_id(session=session, category_id=current_category_id - 1)
    #
    #     # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ–º
    #     if settings.prod:
    #         btns = {f'–¢–µ–º–∞ ‚Ññ{theme.id}': f'choice_theme_{theme.id}' for theme in themes}
    #     else:
    #         btns = {}
    #
    #     # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥", –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    #     if prev_category_exists:
    #         btns.update({"–ù–∞–∑–∞–¥": "slide_theme_back"})
    #
    #     # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–î–∞–ª–µ–µ", –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    #     if next_category_exists:
    #         btns.update({"–î–∞–ª–µ–µ": "slide_theme_next"})
    #
    #     # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    #     reply_markup = get_callback_btns(btns=btns, sizes=(3, 3, 2))
    #
    #     # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ–º–∞—Ö
    #     result_answer = f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {themes[0].category.title}\n\n"
    #     for theme in themes:
    #         result_answer += (f'{theme.id}üü¶ {theme.title}'
    #                          f'üìå–ü—Ä–∏–µ–º: {theme.technique}\n\n')
    #
    #     # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    #     await callback.message.edit_text(f"–í—ã–≤–æ–∂—É —Å–ø–∏—Å–æ–∫ —Ç–µ–º.\n\n{result_answer}", reply_markup=reply_markup)
    # else:
    #     await callback.answer("–¢–µ–º—ã –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")

@user_private_router.callback_query(F.data.startswith('choice_theme_'))
async def choice_theme(callback: CallbackQuery, session: AsyncSession, state: FSMContext) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã."""
    theme_id = int(callback.data.split('_')[2])
    theme = await orm_get_theme_by_id(session, theme_id)
    await state.update_data(prev_message_id=callback.message.message_id)
    await callback.message.answer(
        f"–í—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ —Ç–µ–º—É:\n\nüü¶ {theme.title}\nüìå–ü—Ä–∏–µ–º: {theme.technique}\n\n–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –≤—ã–±–æ—Ä?",
        reply_markup=get_callback_btns(
            btns={"–ü–æ–¥–≤–µ—Ä–∂–¥–∞—é‚úÖ": f"confirm_theme_{theme_id}", "–Ø –ø–µ—Ä–µ–¥—É–º–∞–ª‚ùå": "confirm_theme_"})
    )

    # theme_id = int(callback.data.split('_')[2])
    # current_theme = await orm_get_theme_by_id(session=session, theme_id=theme_id)
    #
    # await state.update_data(prev_message_id=callback.message.message_id)
    #
    # reply_markup = get_callback_btns(
    #     btns={
    #         "–ü–æ–¥–≤–µ—Ä–∂–¥–∞—é‚úÖ": f"confirm_theme_{theme_id}",
    #         "–Ø –ø–µ—Ä–µ–¥—É–º–∞–ª‚ùå": "confirm_theme_"
    #     }
    # )
    #
    # await callback.message.answer(text=f"–í—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ —Ç–µ–º—É:\n\n"
    #                                    f"üü¶ {current_theme.title}\n"
    #                                    f"üìå–ü—Ä–∏–µ–º: {current_theme.technique}\n\n"
    #                                    f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –≤—ã–±–æ—Ä?",reply_markup=reply_markup)

@user_private_router.callback_query(F.data.startswith("confirm_theme_"))
async def confirm_theme(callback: CallbackQuery, session: AsyncSession, state: FSMContext) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã."""
    confirm_theme_id = callback.data.split("_")[2]
    if confirm_theme_id:
        user_id = callback.from_user.id
        theme = await orm_get_theme_by_id(session, int(confirm_theme_id))
        await orm_Edit_user_profile(session, user_id, {'edit_theme': f"{theme.title} {theme.technique}"})
        state_data = await state.get_data()
        await callback.bot.delete_messages(callback.message.chat.id,
                                           [callback.message.message_id, state_data.get("prev_message_id")])
        await callback.message.answer("–¢–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω–∞üì•")
    else:
        await callback.message.delete()

    # confirm_theme_id = callback.data.split("_")[2]
    # if confirm_theme_id:
    #     user_id = callback.from_user.id
    #     current_theme = await orm_get_theme_by_id(session=session, theme_id=int(confirm_theme_id))
    #     data = {'edit_theme': f'{current_theme.title} {current_theme.technique}'}
    #     await orm_Edit_user_profile(session=session, user_id=user_id, data=data)
    #
    #     message_ids_to_delete = []
    #     state_data = await state.get_data()
    #     prev_message_id = state_data.get("prev_message_id")
    #
    #     # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    #     message_ids_to_delete.append(callback.message.message_id)
    #     message_ids_to_delete.append(prev_message_id)
    #
    #     await callback.bot.delete_messages(callback.message.chat.id, message_ids_to_delete)
    #
    #
    #     await callback.message.answer("–¢–µ–º–∞ —É—Å–ø–µ—à–Ω–∞ –≤—ã–±—Ä–∞–Ω–∞üì•")
    # else:
    #     await callback.message.delete()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã "–º–æ–π –ø—Ä–æ—Ñ–∏–ª—å"
@user_private_router.message(User_MainStates.after_registration, F.text.lower() == '–º–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
async def get_user_profile(message: Message, session: AsyncSession, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    data = await orm_Get_info_user(session, message.from_user.id)
    if data:
        await state.set_state(User_MainStates.user_view_profile)
        text = (f"üìÑ–§–ò–û: {data.name}\nüè´–®–∫–æ–ª–∞: {data.school}\nüì±–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {data.phone_number}\n"
                f"üìß–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞: {data.mail}\nüë®‚Äçüè´–§–ò–û –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞: {data.name_mentor}\n"
                f"üë™–î–æ–ª–∂–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞: {data.post_mentor or ''}\nüìú–¢–µ–º–∞: {data.theme}")
        await message.answer("–û—Ç–∫—Ä—ã–≤–∞—é –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å")
        await message.answer(text, reply_markup=get_keyboard("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "–ù–∞–∑–∞–¥", placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
                                                             sizes=(2,)))
    else:
        await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # await state.set_state(User_MainStates.user_view_profile)
    # data = await orm_Get_info_user(session, message.from_user.id)
    # if data:
    #     result_answer = (f"üìÑ–§–ò–û: {data.name}\n"
    #                     f"üè´–®–∫–æ–ª–∞: {data.school}\n"
    #                     f"üì±–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {data.phone_number}\n"
    #                     f"üìß–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞: {data.mail}\n"
    #                     f"üë®‚Äçüè´–§–ò–û –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞: {data.name_mentor}\n"
    #                     f"üë™–î–æ–ª–∂–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞: {data.post_mentor if data.post_mentor else ''}\n"
    #                     f"üìú–¢–µ–º–∞: {data.theme}")
    #
    #     reply_markup = get_keyboard(
    #         "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
    #         "–ù–∞–∑–∞–¥",
    #         placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
    #         sizes=(2,),
    #     )
    #     await message.answer("–û—Ç–∫—Ä—ã–≤–∞—é –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å")
    #     await message.answer(result_answer, reply_markup=reply_markup)
    # else:
    #     await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")






# @user_private_router.message(Command('admin'))
# async def admin(message: Message, session: AsyncSession, state: FSMContext):
#     list_admins = list(await orm_get_list_admin(session=session))
#     print(list_admins)
#     if message.from_user.username == settings.USER_ADMIN_NICK or message.from_user.id in list_admins:
#         reply_markup = admin_kb
#         if message.from_user.id not in list_admins:
#             await orm_add_admin(session=session, user_id=message.from_user.id, username=message.from_user.username)
#         if message.from_user.username == settings.USER_ADMIN_NICK:
#             reply_markup = admin_kb
#             reply_markup.keyboard[1].append(KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞"))
#         await message.answer(text="–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω", reply_markup=reply_markup)
#         await state.set_state(Admin_MainStates.choice_action)
#     else:
#         await message.answer(text="–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")


