import asyncio
import logging
from time import time
from typing import Dict, Union, Callable, Awaitable, List

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InputMediaPhoto, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, StateFilter
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.ext.asyncio import AsyncSession
from app.bot.FSM.FSM_user_private import RegistrationUser, User_MainStates

from app.bot.handlers.user_registartion import user_registration_router
from app.database.models import Material
from app.database.orm_query import get_materials_batch, orm_get_all_themes_by_category_id, orm_get_theme_by_id, \
    get_participant_theme_and_work
from app.kbds.inline import get_callback_btns, create_material_buttons
from app.kbds.reply import get_keyboard
from app.kbds import reply
from config import settings

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_private_router = Router()

# user_private_router.include_router(user_view_profile_router)

# –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –Ω–æ–≤–æ—Å—Ç–∏ –∏ —Ç–µ–º—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# –ö—ç—à —Å —Ç–∞–π–º-–∞—É—Ç–æ–º
CACHE_TIMEOUT = 1800 # 30 –º–∏–Ω—É—Ç
cache_current_news: Dict[int, int] = {}
cache_current_theme: Dict[int, int] = {}
cache_current_material: Dict[int, int] = {}
cache_last_access: Dict[int, float] = {}


async def paginate_items(
        message: Union[Message, CallbackQuery],
        session: AsyncSession,
        user_id: int,
        item_id: int,
        cache: Dict[int, int],
        fetch_func: Callable,
        format_func: Callable,
        kb_func: Callable[[list, int], Union[InlineKeyboardMarkup, Awaitable[InlineKeyboardMarkup]]]
) -> None:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤."""
    try:
        if user_id in cache and time() - cache_last_access.get(user_id, 0) > CACHE_TIMEOUT:
            del cache[user_id]

        cache[user_id] = item_id
        cache_last_access[user_id] = time()
        items = await fetch_func(session, item_id)
        if not items:
            await (message.answer if isinstance(message, Message) else message.message.edit_text)("–ë–æ–ª—å—à–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–µ—Ç.")
            return
        text = format_func(items)
        reply_markup_result = kb_func(items, item_id)
        reply_markup = await reply_markup_result if isinstance(reply_markup_result, Awaitable) else reply_markup_result
        if isinstance(message, Message):
            await message.answer(text, reply_markup=reply_markup)
        else:
            await message.message.edit_text(text, reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è user_id={user_id}: {e}")
        await (message.answer if isinstance(message, Message) else message.message.edit_text)("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏.")




# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã "–Ω–æ–≤–æ—Å—Ç–∏"
@user_private_router.message(User_MainStates.after_registration, F.text.lower() == '–Ω–æ–≤–æ—Å—Ç–∏')
async def news(message: Message, session: AsyncSession) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ Telegram-–∫–∞–Ω–∞–ª –Ω–æ–≤–æ—Å—Ç–µ–π."""
    builder = InlineKeyboardBuilder()
    builder.button(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –¢–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª", url=settings.news_channel_url)
    await message.answer(
        "–°—é–¥–∞ –ø—Ä–∏—Å—ã–ª–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏.ü§∑\n–í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ Telegram-–∫–∞–Ω–∞–ª–µ.‚§µ",
        reply_markup=builder.as_markup()
    )


@user_private_router.message(User_MainStates.after_registration, F.text.lower() == '–º–∞—Ç–µ—Ä–∏–∞–ª—ã')
async def get_material(message: Message, session: AsyncSession, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–≤—É—é –ø–∞—á–∫—É –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
    user_id = message.from_user.id
    batch_num = 1  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π –ø–∞—á–∫–∏
    cache_current_material[user_id] = batch_num  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –ø–∞—á–∫—É

    try:
        materials = await get_materials_batch(session, batch_num)

        if not materials:
            await message.answer("–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            return

        text = "\n".join(f"{m.id}üü¶ {m.title}" for m in materials)
        keyboard = await create_material_buttons(session, materials, batch_num)

        await message.answer(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"Error getting materials: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")


@user_private_router.callback_query(F.data.startswith('slide_material_'))
async def slide_material(callback: CallbackQuery, session: AsyncSession) -> None:
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –º–µ–∂–¥—É –ø–∞—á–∫–∞–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
    user_id = callback.from_user.id
    action = callback.data.split("_")[2]
    current_batch = cache_current_material.get(user_id, 1)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—É—é –ø–∞—á–∫—É
    if action == 'next':
        new_batch = current_batch + 1
    else:  # 'back'
        new_batch = max(1, current_batch - 1)

    try:
        materials = await get_materials_batch(session, new_batch)

        if not materials:
            await callback.answer("–î–∞–ª—å—à–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –Ω–µ—Ç" if action == 'next' else "–≠—Ç–æ –ø–µ—Ä–≤–∞—è –ø–∞—á–∫–∞")
            return

        cache_current_material[user_id] = new_batch

        text = "\n".join(f"{m.id}üü¶ {m.title}" for m in materials)
        keyboard = await create_material_buttons(session, materials, new_batch)

        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()

    except Exception as e:
        logger.error(f"Error sliding materials: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ")


async def create_material_buttons(
        session: AsyncSession,
        materials: List[Material],
        current_batch: int
) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–∞—á–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
    from aiogram.utils.keyboard import InlineKeyboardBuilder

    builder = InlineKeyboardBuilder()

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    for material in materials:
        if material.link:
            builder.button(text=f"–ú–∞—Ç–µ—Ä–∏–∞–ª ‚Ññ{material.id}", url=material.link)
        else:
            builder.button(
                text=f"–ú–∞—Ç–µ—Ä–∏–∞–ª ‚Ññ{material.id} (–Ω–µ—Ç —Å—Å—ã–ª–∫–∏)",
                callback_data=f"no_link_{material.id}"
            )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–ª–µ–¥—É—é—â–µ–π –ø–∞—á–∫–∏
    next_batch_exists = len(await get_materials_batch(session, current_batch + 1)) > 0
    prev_batch_exists = current_batch > 1

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if prev_batch_exists:
        builder.button(text="‚óÄ –ù–∞–∑–∞–¥", callback_data="slide_material_back")

    builder.button(text=f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_batch}", callback_data="current_page")

    if next_batch_exists:
        builder.button(text="‚ñ∂ –î–∞–ª–µ–µ", callback_data="slide_material_next")

    builder.adjust(1, repeat=True)  # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥ –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    if prev_batch_exists or next_batch_exists:
        builder.adjust(2 if (prev_batch_exists != next_batch_exists) else 3)  # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

    return builder.as_markup()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã "–≤—ã–±—Ä–∞—Ç—å —Ç–µ–º—É"
@user_private_router.message(F.text.lower() == '–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–º—ã')
async def get_theme(message: Message, session: AsyncSession, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ–º."""
    user_id = message.from_user.id
    await paginate_items(
        message, session, user_id, 1, cache_current_theme,
        orm_get_all_themes_by_category_id,
        lambda ts: f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {ts[0].category.title}\n\n" + "\n".join(
            f"{t.id}üü¶ {t.title}\nüìå–ü—Ä–∏–µ–º: {t.technique}" for t in ts),
        lambda ts, _: get_callback_btns(
            btns=({f"–¢–µ–º–∞ ‚Ññ{t.id}": f"choice_theme_{t.id}" for t in ts} if settings.prod else {}) | {
                "–î–∞–ª–µ–µ": "slide_theme_next"},
            sizes=(3, 3, 2)
        )
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É —Ç–µ–º–∞–º–∏
@user_private_router.callback_query(F.data.startswith('slide_theme_'))
async def choice_theme(callback: CallbackQuery, session: AsyncSession) -> None:
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ–º."""
    user_id = callback.from_user.id
    action = callback.data.split("_")[2]
    current_id = cache_current_theme.get(user_id, 1)
    new_id = current_id + 1 if action == 'next' else max(1, current_id - 1)

    async def kb_func(themes, _):
        next_exists = await orm_get_all_themes_by_category_id(session, new_id + 1)
        prev_exists = new_id > 1
        btns = {f"–¢–µ–º–∞ ‚Ññ{t.id}": f"choice_theme_{t.id}" for t in themes} if settings.prod else {}
        if prev_exists:
            btns["–ù–∞–∑–∞–¥"] = "slide_theme_back"
        if next_exists:
            btns["–î–∞–ª–µ–µ"] = "slide_theme_next"
        return get_callback_btns(btns=btns, sizes=(3, 3, 2))

    await paginate_items(
        callback, session, user_id, new_id, cache_current_theme,
        orm_get_all_themes_by_category_id,
        lambda ts: f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {ts[0].category.title}\n\n" + "\n".join(
            f"{t.id}üü¶ {t.title}\nüìå–ü—Ä–∏–µ–º: {t.technique}" for t in ts),
        kb_func)


@user_private_router.callback_query(F.data.startswith('choice_theme_'))
async def choice_theme(callback: CallbackQuery, session: AsyncSession, state: FSMContext) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã."""
    theme_id = int(callback.data.split('_')[2])
    theme = await orm_get_theme_by_id(session, theme_id)
    await state.update_data(prev_message_id=callback.message.message_id)
    await callback.message.answer(
        f"–í—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ —Ç–µ–º—É:\n\nüü¶ {theme.title}\nüìå–ü—Ä–∏–µ–º: {theme.technique}\n\n–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –≤—ã–±–æ—Ä?",
        reply_markup=get_callback_btns(
            btns={"–ü–æ–¥–≤–µ—Ä–∂–¥–∞—é‚úÖ": f"confirm_theme_{theme_id}", "–Ø –ø–µ—Ä–µ–¥—É–º–∞–ª‚ùå": "confirm_theme_"})
    )



@user_private_router.callback_query(F.data.startswith("confirm_theme_"))
async def confirm_theme(callback: CallbackQuery, session: AsyncSession, state: FSMContext) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã."""
    confirm_theme_id = callback.data.split("_")[2]
    if confirm_theme_id:
        user_id = callback.from_user.id
        theme = await orm_get_theme_by_id(session, int(confirm_theme_id))
        await orm_Edit_user_profile(session, user_id, {'edit_theme': f"{theme.title} {theme.technique}"})
        state_data = await state.get_data()
        await callback.bot.delete_messages(callback.message.chat.id,
                                           [callback.message.message_id, state_data.get("prev_message_id")])
        await callback.message.answer("–¢–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω–∞üì•")
    else:
        await callback.message.delete()

    # confirm_theme_id = callback.data.split("_")[2]
    # if confirm_theme_id:
    #     user_id = callback.from_user.id
    #     current_theme = await orm_get_theme_by_id(session=session, theme_id=int(confirm_theme_id))
    #     data = {'edit_theme': f'{current_theme.title} {current_theme.technique}'}
    #     await orm_Edit_user_profile(session=session, user_id=user_id, data=data)
    #
    #     message_ids_to_delete = []
    #     state_data = await state.get_data()
    #     prev_message_id = state_data.get("prev_message_id")
    #
    #     # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    #     message_ids_to_delete.append(callback.message.message_id)
    #     message_ids_to_delete.append(prev_message_id)
    #
    #     await callback.bot.delete_messages(callback.message.chat.id, message_ids_to_delete)
    #
    #
    #     await callback.message.answer("–¢–µ–º–∞ —É—Å–ø–µ—à–Ω–∞ –≤—ã–±—Ä–∞–Ω–∞üì•")
    # else:
    #     await callback.message.delete()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã "–º–æ–π –ø—Ä–æ—Ñ–∏–ª—å"
@user_private_router.message(User_MainStates.after_registration, F.text.lower() == '–º–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
async def get_user_profile(message: Message, session: AsyncSession, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

    participant = await get_participant_theme_and_work(session, message.chat.id)

    if not participant:
        await message.answer("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response = (
        f"üìå –í–∞—à–∞ —Ç–µ–º–∞: {participant.theme}\n"
        f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É: {participant.work_link or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}"
    )

    await message.answer(response)

    # await state.set_state(User_MainStates.user_view_profile)
    # data = await orm_Get_info_user(session, message.from_user.id)
    # if data:
    #     result_answer = (f"üìÑ–§–ò–û: {data.name}\n"
    #                     f"üè´–®–∫–æ–ª–∞: {data.school}\n"
    #                     f"üì±–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {data.phone_number}\n"
    #                     f"üìß–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞: {data.mail}\n"
    #                     f"üë®‚Äçüè´–§–ò–û –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞: {data.name_mentor}\n"
    #                     f"üë™–î–æ–ª–∂–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞: {data.post_mentor if data.post_mentor else ''}\n"
    #                     f"üìú–¢–µ–º–∞: {data.theme}")
    #
    #     reply_markup = get_keyboard(
    #         "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
    #         "–ù–∞–∑–∞–¥",
    #         placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
    #         sizes=(2,),
    #     )
    #     await message.answer("–û—Ç–∫—Ä—ã–≤–∞—é –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å")
    #     await message.answer(result_answer, reply_markup=reply_markup)
    # else:
    #     await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")






# @user_private_router.message(Command('admin'))
# async def admin(message: Message, session: AsyncSession, state: FSMContext):
#     list_admins = list(await orm_get_list_admin(session=session))
#     print(list_admins)
#     if message.from_user.username == settings.USER_ADMIN_NICK or message.from_user.id in list_admins:
#         reply_markup = admin_kb
#         if message.from_user.id not in list_admins:
#             await orm_add_admin(session=session, user_id=message.from_user.id, username=message.from_user.username)
#         if message.from_user.username == settings.USER_ADMIN_NICK:
#             reply_markup = admin_kb
#             reply_markup.keyboard[1].append(KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞"))
#         await message.answer(text="–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω", reply_markup=reply_markup)
#         await state.set_state(Admin_MainStates.choice_action)
#     else:
#         await message.answer(text="–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")


