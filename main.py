import argparse
import asyncio
import logging
from typing import List

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from sqlalchemy import select
from sqlalchemy.exc import SQLAlchemyError

from app.bot.handlers.news_channel import news_channel_router
from app.bot.middlewares.db import DataBaseSession

from app.database.engine import create_db, drop_db, session_maker


from app.bot.handlers.user_private import user_private_router

from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.types import BotCommandScopeAllPrivateChats, Message, ReplyKeyboardRemove
from sqlalchemy.ext.asyncio import AsyncSession

from app.bot.FSM.FSM_user_private import User_MainStates
from app.database.models import User

from config import settings

from app.database.orm_query import orm_Check_avail_user, orm_AddUser, orm_Check_register_user, orm_get_all_user
from app.kbds import reply


from app.bot.common.bot_cmds_list import private
# ALLOWED_UPDATES = ['message', 'callback_query']


logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à –¥–ª—è user_ids (–∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ)
USER_IDS_CACHE: List[int] = []

async def fetch_user_ids(session: AsyncSession) -> List[int]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö user_id –∏–∑ —Ç–∞–±–ª–∏—Ü—ã User."""
    query = select(User.user_id)
    result = await session.execute(query)
    return result.scalars().all()

async def send_message_batch(bot: Bot, user_ids: List[int], message_text: str, batch_size: int = 30) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–∞—Ä—Ç–∏—è–º–∏ —Å —É—á–µ—Ç–æ–º –ª–∏–º–∏—Ç–æ–≤ Telegram."""
    for i in range(0, len(user_ids), batch_size):
        batch = user_ids[i:i + batch_size]
        tasks = [bot.send_message(chat_id=user_id, text=message_text, reply_markup=ReplyKeyboardRemove()) for user_id in batch]
        results = await asyncio.gather(*tasks, return_exceptions=True)
        for user_id, result in zip(batch, results):
            if isinstance(result, Exception):
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ user_id={user_id}: {result}")
            else:
                logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ user_id={user_id}")
        await asyncio.sleep(1)  # –ü–∞—É–∑–∞ 1 —Å–µ–∫—É–Ω–¥–∞ –º–µ–∂–¥—É –ø–∞—Ä—Ç–∏—è–º–∏ (30 —Å–æ–æ–±—â–µ–Ω–∏–π/—Å–µ–∫)

async def send_message_to_all_users(bot: Bot, session: AsyncSession, message_text: str) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –±–∞–∑—ã."""
    global USER_IDS_CACHE
    try:
        if not USER_IDS_CACHE:
            USER_IDS_CACHE = await fetch_user_ids(session)
        await send_message_batch(bot, USER_IDS_CACHE, message_text)
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {len(USER_IDS_CACHE)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º: {e}")
        raise

def get_startup_handler(reset_db: bool):
    async def startup(bot: Bot) -> None:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π."""
        try:
            if reset_db:
                await drop_db()
                logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–±—Ä–æ—à–µ–Ω–∞")
            await create_db()
            logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            async with session_maker() as session:
                welcome_message = (
                    "üì¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!\n"
                    "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã.‚úè"
                )
                await send_message_to_all_users(bot, session, welcome_message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            raise
    return startup


async def on_shutdown(bot):
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def main():
    parser = argparse.ArgumentParser(description="–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∫–æ–Ω–∫—É—Ä—Å–∞ ¬´–†–ï–ü–ò–ù –ù–ê–®!¬ª")
    parser.add_argument("--reset-db", action="store_true", help="–°–±—Ä–æ—Å–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ")
    args = parser.parse_args()

    # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
    bot = Bot(token=settings.bot_token, default=DefaultBotProperties(parse_mode="HTML"))
    dp = Dispatcher()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∑–∞–ø—É—Å–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    dp.startup.register(get_startup_handler(args.reset_db))
    dp.shutdown.register(on_shutdown)

    # Middleware –¥–ª—è —Å–µ—Å—Å–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    dp.update.middleware(DataBaseSession(session_pool=session_maker))

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤
    dp.include_router(user_private_router)
    dp.include_router(news_channel_router)

    @dp.message(CommandStart())
    async def start(message: Message, state: FSMContext, session: AsyncSession):
        try:
            user_id = message.from_user.id
            if user_id not in USER_IDS_CACHE:
                if not await orm_Check_avail_user(session, user_id):
                    info_user = {
                        "user_id": user_id,
                        "nickname": message.from_user.username or "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                    }
                    await orm_AddUser(session, info_user)
                    USER_IDS_CACHE.append(user_id)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à

            user_name = await orm_Check_register_user(session, user_id)
            if settings.prod:
                if not user_name:
                    await state.set_state(User_MainStates.before_registration)
                    await message.answer(
                        "–ü—Ä–∏–≤–µ—Ç.üëã"
                        "–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∫–æ–Ω–∫—É—Ä—Å–µ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ö–∞–∫ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤, –Ω–∞–ø–∏—à–∏ '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è' –∏–ª–∏ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µüëá",
                        reply_markup=reply.start_kb_prod
                    )
                else:
                    await state.set_state(User_MainStates.after_registration)
                    await message.answer(
                        f"–ü—Ä–∏–≤–µ—Ç {user_name.split(' ')[1]}, –¥–∞–≤–Ω–æ –Ω–µ –≤–∏–¥–µ–ª–∏—Å—åüëã",
                        reply_markup=reply.menu_kb
                    )
                    await message.answer("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é.")
            else:
                await state.set_state(User_MainStates.before_registration)
                await message.answer(
                    """
üì¢ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–æ–Ω–∫—É—Ä—Å–∞ ¬´–†–ï–ü–ò–ù –ù–ê–®!¬ª
üîπ –ü–æ—á–µ–º—É –≤—ã –∑–¥–µ—Å—å?
–¢—ã, –Ω–∞–≤–µ—Ä–Ω–æ–µ, —Å–ª—ã—à–∞–ª –ø—Ä–æ –ò–ª—å—é –†–µ–ø–∏–Ω–∞ ‚Äî –≤–µ–ª–∏–∫–æ–≥–æ —Ö—É–¥–æ–∂–Ω–∏–∫–∞, –∞–≤—Ç–æ—Ä–∞ ¬´–ë—É—Ä–ª–∞–∫–æ–≤ –Ω–∞ –í–æ–ª–≥–µ¬ª. –ù–æ –≤–æ—Ç —Å—Ç—Ä–∞–Ω–Ω–æ—Å—Ç—å: –≤ —Ñ–∏–Ω—Å–∫–æ–º –º—É–∑–µ–µ ¬´–ê—Ç–µ–Ω–µ—É–º¬ª –≤–¥—Ä—É–≥ —Ä–µ—à–∏–ª–∏, —á—Ç–æ –†–µ–ø–∏–Ω ‚Äî –Ω–µ —Ä—É—Å—Å–∫–∏–π —Ö—É–¥–æ–∂–Ω–∏–∫, –∞ —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π. –ö–∞–∫ —Ç–∞–∫? –í–µ–¥—å –æ–Ω —Å–∞–º –ø–∏—Å–∞–ª, —á—Ç–æ –µ–≥–æ –≤–¥–æ—Ö–Ω–æ–≤–∏–ª–∞ —Ä—É—Å—Å–∫–∞—è –í–æ–ª–≥–∞, —á—Ç–æ –æ–Ω —É–≤–∏–¥–µ–ª –≤ –±—É—Ä–ª–∞–∫–∞—Ö —Å–∏–ª—É –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞—Ä–æ–¥–∞!
–ß—Ç–æ –º—ã –±—É–¥–µ–º —Å —ç—Ç–∏–º –¥–µ–ª–∞—Ç—å? –û—Ç–≤–µ—Ç –ø—Ä–æ—Å—Ç–æ–π: –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –†–µ–ø–∏–Ω ‚Äì –Ω–∞—à!
üîπ –ó–∞—á–µ–º —ç—Ç–æ—Ç –∫–æ–Ω–∫—É—Ä—Å?
–ú—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ –±—É–¥–µ–º –≥–æ–≤–æ—Ä–∏—Ç—å, –∞ –¥–æ–∫–∞–∂–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫—É—é –ø—Ä–∞–≤–¥—É —á–µ—Ä–µ–∑ —Ü–∏—Ñ—Ä–æ–≤–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ. –¢—ã —Å–º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –≤—ã—Å—Ç–∞–≤–∫—É, –≥–¥–µ —Ä–∞—Å—Å–∫–∞–∂–µ—à—å –æ –†–µ–ø–∏–Ω–µ –∏ –µ–≥–æ —Å–≤—è–∑–∏ —Å –°–∞–º–∞—Ä–æ–π, –í–æ–ª–≥–æ–π, –±—É—Ä–ª–∞–∫–∞–º–∏, —Ä—É—Å—Å–∫–æ–π –∫—É–ª—å—Ç—É—Ä–æ–π. –≠—Ç–æ —Ç–≤–æ–π —à–∞–Ω—Å —Å—Ç–∞—Ç—å —Ö—É–¥–æ–∂–Ω–∏–∫–æ–º, –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–º –∏ —Ä–∞—Å—Å–∫–∞–∑—á–∏–∫–æ–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ!
üîπ –¢—ã —Ç–æ—á–Ω–æ —Å–ø—Ä–∞–≤–∏—à—å—Å—è!
–ú—ã –≤–µ—Ä–∏–º –≤ —Ç–µ–±—è! –£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –≤—Å—ë, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∫—Ä—É—Ç–æ–π –ø—Ä–æ–µ–∫—Ç:
‚úÖ –ù–∞—Å—Ç–∞–≤–Ω–∏–∫–∏ ‚Äì –ª—É—á—à–∏–µ —ç–∫—Å–ø–µ—Ä—Ç—ã –ø–æ–º–æ–≥—É—Ç –∏ –ø–æ–¥—Å–∫–∞–∂—É—Ç.
‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã ‚Äì –≤—Å—è –Ω—É–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –†–µ–ø–∏–Ω–µ, –°–∞–º–∞—Ä–µ –∏ –∏—Å—Ç–æ—Ä–∏–∏ –µ—Å—Ç—å –≤ —ç—Ç–æ–º –±–æ—Ç–µ.
‚úÖ –ü–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ ‚Äì –º—ã –±—É–¥–µ–º –≤–µ—Å—Ç–∏ —Ç–µ–±—è –æ—Ç –≤—ã–±–æ—Ä–∞ –∏–¥–µ–∏ –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã—Å—Ç–∞–≤–∫–∏.
‚úÖ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ ‚Äì —Ç—ã –ø–æ–ø—Ä–æ–±—É–µ—à—å 3D-–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ, –Ω–µ–π—Ä–æ—Å–µ—Ç–∏, –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã.
üîπ –ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?
üí° –ü—Ä–æ—á–∏—Ç–∞–π —É—Å–ª–æ–≤–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞.
üí° –í—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ç–µ–º—É ‚Äì —Ç–µ–±—è –∂–¥—ë—Ç 30 –∏–¥–µ–π!
üí° –°–ª–µ–¥–∏ –∑–∞ –Ω–∞—à–∏–º–∏ –ø–æ—Å—Ç–∞–º–∏ ‚Äì –º—ã —Ä–∞—Å—Å–∫–∞–∂–µ–º, –∫–∞–∫ —Å–æ–∑–¥–∞—Ç—å –≤—ã—Å—Ç–∞–≤–∫—É —à–∞–≥ –∑–∞ —à–∞–≥–æ–º.
üì¢ –†–µ–ø–∏–Ω –Ω–∞—à! –°–∞–º–∞—Ä–∞ ‚Äì –µ–≥–æ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ! –ê —Ç—ã ‚Äì —Ç–æ—Ç, –∫—Ç–æ –ø–æ–∫–∞–∂–µ—Ç —ç—Ç–æ –º–∏—Ä—É! üöÄ
                    """,
                    reply_markup=reply.start_kb_not_prod
                )
        except SQLAlchemyError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è user_id={message.from_user.id}: {e}")
            await message.answer("–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except Exception as e:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è user_id={message.from_user.id}: {e}")
            await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await bot.delete_webhook(drop_pending_updates=True)
    await bot.set_my_commands(commands=private, scope=BotCommandScopeAllPrivateChats())
    # await bot.delete_my_commands()
    logger.info("–ó–∞–ø—É—Å–∫ polling...")
    await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())

if __name__ == "__main__":
    asyncio.run(main())

