import argparse
import asyncio
import logging
from typing import List

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from sqlalchemy import select

from app.bot.handlers.user_private import user_private_router
from app.bot.handlers.user_registartion import user_registration_router
from app.bot.middlewares.db import DataBaseSession

from app.database.engine import create_db, drop_db, session_maker




from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import BotCommandScopeAllPrivateChats, Message, ReplyKeyboardRemove
from sqlalchemy.ext.asyncio import AsyncSession

from app.bot.FSM.FSM_user_private import User_MainStates
from app.database.models import UserCode

from config import settings

from app.database.orm_query import get_verified_user_by_chat_id
from app.kbds import reply


from app.bot.common.bot_cmds_list import private
# ALLOWED_UPDATES = ['message', 'callback_query']


logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à –¥–ª—è user_ids (–∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ)
USER_IDS_CACHE: List[int] = []

async def fetch_user_ids(session: AsyncSession) -> List[int]:
     """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö user_id –∏–∑ —Ç–∞–±–ª–∏—Ü—ã User."""
     query = select(UserCode.telegram_chat_id)
     result = await session.execute(query)
     return result.scalars().all()

async def send_message_batch(bot: Bot, user_ids: List[int], message_text: str, batch_size: int = 30) -> None:
     """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–∞—Ä—Ç–∏—è–º–∏ —Å —É—á–µ—Ç–æ–º –ª–∏–º–∏—Ç–æ–≤ Telegram."""
     for i in range(0, len(user_ids), batch_size):
         batch = user_ids[i:i + batch_size]
         tasks = [bot.send_message(chat_id=user_id, text=message_text, reply_markup=ReplyKeyboardRemove()) for user_id in batch]
         results = await asyncio.gather(*tasks, return_exceptions=True)
         for user_id, result in zip(batch, results):
             if isinstance(result, Exception):
                 logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ user_id={user_id}: {result}")
             else:
                 logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ user_id={user_id}")
         await asyncio.sleep(1)  # –ü–∞—É–∑–∞ 1 —Å–µ–∫—É–Ω–¥–∞ –º–µ–∂–¥—É –ø–∞—Ä—Ç–∏—è–º–∏ (30 —Å–æ–æ–±—â–µ–Ω–∏–π/—Å–µ–∫)

async def send_message_to_all_users(bot: Bot, session: AsyncSession, message_text: str) -> None:
     """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –±–∞–∑—ã."""
     global USER_IDS_CACHE
     try:
         if not USER_IDS_CACHE:
             USER_IDS_CACHE = await fetch_user_ids(session)
         await send_message_batch(bot, USER_IDS_CACHE, message_text)
         logger.info(f"–°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {len(USER_IDS_CACHE)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
     except Exception as e:
         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º: {e}")
         raise

def get_startup_handler(reset_db: bool):
    async def startup(bot: Bot) -> None:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π."""
        try:
            if reset_db:
                await drop_db()
                logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–±—Ä–æ—à–µ–Ω–∞")
            await create_db()
            logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            async with session_maker() as session:
                welcome_message = (
                    "üì¢ –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!\n"
                    "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã.‚úè"
                )
                await send_message_to_all_users(bot, session, welcome_message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            raise
    return startup


async def on_shutdown(bot):
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def main():
    parser = argparse.ArgumentParser(description="–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∫–æ–Ω–∫—É—Ä—Å–∞ ¬´–†–ï–ü–ò–ù –ù–ê–®!¬ª")
    parser.add_argument("--reset-db", action="store_true", help="–°–±—Ä–æ—Å–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ")
    args = parser.parse_args()

    # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
    bot = Bot(token=settings.bot_token, default=DefaultBotProperties(parse_mode="HTML"))
    dp = Dispatcher()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∑–∞–ø—É—Å–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    dp.startup.register(get_startup_handler(args.reset_db))
    dp.shutdown.register(on_shutdown)

    # Middleware –¥–ª—è —Å–µ—Å—Å–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    dp.update.middleware(DataBaseSession(session_pool=session_maker))

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤
    dp.include_router(user_private_router)
    # dp.include_router(news_channel_router)
    dp.include_router(user_registration_router)

    @dp.message(CommandStart())
    async def start(message: Message, state: FSMContext, session: AsyncSession):
            chat_id = message.chat.id
            user_code = await get_verified_user_by_chat_id(session, chat_id)
            if user_code:
                await state.set_state(User_MainStates.after_registration)
                await message.answer("C –≤–æ–≤—Ä–∞—â–µ–Ω–∏–µ–º.", reply_markup=reply.menu_kb)
            else:
                await state.set_state(User_MainStates.before_registration)
                await message.answer("–ü—Ä–∏–≤–µ—Ç—Å–≤—É—é, –¥–æ—Ä–æ–≥–æ–π —É—á–∞—Å—Ç–Ω–∏–∫. –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –≤–≤–µ–¥–∏ –∫–æ–¥.")

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await bot.delete_webhook(drop_pending_updates=True)
    await bot.set_my_commands(commands=private, scope=BotCommandScopeAllPrivateChats())
    # await bot.delete_my_commands()
    logger.info("–ó–∞–ø—É—Å–∫ polling...")
    await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())

if __name__ == "__main__":
    asyncio.run(main())

